import tkinter as tk
from tkinter import ttk, messagebox
import Balance_Income_Ratios
import QuarterlyRevenues
import pandas as pd
from sec_api import QueryApi  
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


query_api = QueryApi(api_key="your_api_key")

def fetch_data_and_plot():
    ticker = ticker_entry.get()
    if not ticker:
        messagebox.showwarning("Warning", "Please enter a ticker symbol")
        return

    results_text.delete("1.0", tk.END)  

    try:
        balance_sheet, income_statement = Balance_Income_Ratios.fetch_and_process_financial_statements(ticker)
        
        if not balance_sheet.empty:
            most_recent_bs = balance_sheet.iloc[:, -1]  
            results_text.insert(tk.END, "Most Recent Balance Sheet:\n")
            results_text.insert(tk.END, most_recent_bs.to_string() + "\n\n")

        if not income_statement.empty:
            most_recent_is = income_statement.iloc[:, -1]  
            results_text.insert(tk.END, "Most Recent Income Statement:\n")
            results_text.insert(tk.END, most_recent_is.to_string() + "\n\n")

        all_revenue_data = QuarterlyRevenues.fetch_revenue_data(ticker)
        fig = QuarterlyRevenues.plot_revenue_data(all_revenue_data)

        for widget in plot_frame.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=plot_frame)
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        canvas.draw()
    except Exception as e:
        messagebox.showerror("Error", str(e))

root = tk.Tk()
root.title("Financial Data Analysis")

frame = ttk.Frame(root)
frame.pack(padx=10, pady=10, fill='both', expand=True)

ticker_label = ttk.Label(frame, text="Ticker Symbol:")
ticker_label.pack(side=tk.LEFT)

ticker_entry = ttk.Entry(frame)
ticker_entry.pack(side=tk.LEFT)

fetch_button = ttk.Button(frame, text="Fetch Data and Plot", command=fetch_data_and_plot)
fetch_button.pack(side=tk.LEFT)

results_text = tk.Text(frame, height=20, width=100)  
results_text.pack(expand=True, fill='both')

plot_frame = ttk.Frame(root)
plot_frame.pack(fill='both', expand=True)

root.mainloop()
